-- Active: 1742406895177@@127.0.0.1@3306@ticketbookingsystem
select venue.venue_name, (Select AVG(event.ticket_price) from event WHERE event.venue_id = venue.venue_id) as AvgTicket from venue;

select event.event_name from event WHERE (Select SUM(booking.num_tickets) from booking where booking.event_id = event.booking_id) > (0.5 * event.total_seats);

Select event.event_name, (select SUM(booking.num_tickets) from booking where booking.event_id = event.booking_id) as totalTicketsSold from event;

select customer.customer_name from customer WHERE 
NOT EXISTS(Select customer_id from booking where booking.customer_id = customer.customer_id);

Select event.event_name from event where event.event_id NOT IN(Select booking.event_id from booking where booking.event_id = event.event_id);

Select t.event_type, SUM(t.total_tickets) FROM (select event.event_type, SUM(booking.num_tickets) as total_tickets from event LEFT JOIN booking ON booking.event_id = event.event_id GROUP BY event.event_id, event.event_type) as t GROUP BY t.event_type;
Select event.ticket_price from event WHERE ticket_price > (Select AVG(event.ticket_price) from event);

Select customer.customer_name, (Select SUM(booking.total_cost) from booking where booking.customer_id = customer.customer_id) as total_revenue from customer; 

Select customer.customer_name from customer where customer_id IN(select booking.customer_id from booking JOIN event ON booking.event_id = event.event_id where event.venue_id=4);

select event.event_type, SUM(booking.num_tickets) FROM event JOIN booking ON booking.event_id = event.event_id GROUP BY event.event_type;

SELECT customer.customer_name, DATE_FORMAT(booking.booking_date, "%y-%m") as Month, SUM(booking.num_tickets) from booking JOIN customer ON booking.customer_id = customer.customer_id GROUP BY customer.customer_name, Month; 

Select venue.venue_name, AVG(event.ticket_price) from event JOIN venue ON event.venue_id = venue.venue_id GROUP BY venue.venue_name;

 --Scalar subquery
Select * from event where ticket_price > (Select AVG(ticket_price) from event); 
Select e.event_name, e.ticket_price 
from event e 
JOIN (select avg(ticket_price) price from event) as money
ON e.ticket_price > money.price

--Multiple row Subquery
--1. Subquery that returns multiple column and multiple row 
--2. Subqeury that returns only 1 column and multiple rows

Select event.event_name, SUM(booking.num_tickets) from booking JOIN event ON booking.event_id = event.event_id GROUP BY event.event_name, booking.event_id;

Select event_id, num_tickets from booking where (event_id, num_tickets) IN 
(Select event_id, MAX(num_tickets) from booking GROUP BY event_id);

Select event_name, event_id from event where event_id NOT IN (Select DISTINCT event_id from booking);

--Correlated Subquery: Subquery related to outer query

--Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery

--Find a customer who made bookings which are greater than average bookings
Select customer.customer_name, booking.num_tickets from customer JOIN booking ON customer.customer_id = booking.customer_id 
WHERE
booking.num_tickets > (Select AVG(num_tickets) from booking);

Select c.customer_name from customer c Where c.customer_id in (Select booking.customer_id from booking WHERE booking.num_tickets > (Select AVG(num_tickets) from booking));

Select customer_name from customer where NOT EXISTS(Select 1 from booking where booking.customer_id = customer.customer_id);

-- Find the events whose bookings were better than average bookings across all events
--Solution
--1. Find total sales for each store
--2. Fing Average Sales for all stores.
-- Compare 1 & 2.
Select event.event_name, SUM(booking.num_tickets) from booking JOIN event ON booking.event_id = event.event_id GROUP BY
event.event_name 
HAVING SUM(booking.num_tickets) > (
    Select AVG(total_bookings) FROM(
        Select SUM(booking.num_tickets) as total_bookings from booking GROUP BY booking.event_id
    ) AS avg_booking
)

--SELECT, WHERE, FROM, HAVING 

--Fetch all events whose ticket_price is greater than avg ticket_price and add remarks

Select event_name, (
    case when ticket_price > 
(Select AVG(ticket_price) from event) 
then 'HighPriceThanAVG' 
else NULL END
) as remarks from event

--Find the customers who have booked more events that avg_event bookings

Select customer.customer_name, 
COUNT(DISTINCT booking.event_id) as total_events_booked 
from booking 
JOIN customer ON booking.customer_id = customer.customer_id
GROUP BY customer.customer_name 
HAVING COUNT(DISTINCT booking.event_id) > (
    Select AVG(total_events) from (
        Select customer_id, COUNT(DISTINCT event_id) as total_events from booking GROUP BY customer_id) as event_counts)

